/**
 * @file main4.cpp
 * @author Auralius Manurung
 * @date 18 Apr 2015
 * 
 * @brief Example for the extended Kalman filter.
 * 
 * @section DESCRIPTION
 * This example is taken from <a href="http://ch.mathworks.com/matlabcentral/fileexchange/38302-kalman-filter-package/content//Kalman%20Filter%20Package/Examples/ExtendedKalmanFilterDemo.m">here</a>.
 */

#include <fstream>

#include "include/ekf.h"

/// @cond DEV
/*
 * Class EKF needs to be derived, two virtual functions are provided in 
 * which system model and output model are described.
 */
class MyEKF: public EKF
{
public:  
  double u[100][2] = {
    {-0.486751, 0.136},
    {-0.50909, 0.137},
    {-0.520307, 0.137},
    {-0.531428, 0.136},
    {-0.542358, 0.139},
    {-0.553575, 0.139},
    {-0.597965, 0.142},
    {-0.609182, 0.143},
    {-0.620399, 0.143},
    {-0.631521, 0.144},
    {-0.64245, 0.145},
    {-0.664789, 0.141},
    {-0.687223, 0.142},
    {-0.698632, 0.142},
    {-0.710041, 0.143},
    {-0.721546, 0.144},
    {-0.733243, 0.145},
    {-0.744748, 0.146},
    {-0.756157, 0.147},
    {-0.767662, 0.148},
    {-0.779358, 0.149},
    {-0.790767, 0.15},
    {-0.802272, 0.152},
    {-0.813681, 0.153},
    {-0.825473, 0.154},
    {-0.836882, 0.155},
    {-0.848387, 0.157},
    {-0.859796, 0.158},
    {-0.871493, 0.16},
    {-0.882998, 0.161},
    {-0.917608, 0.168},
    {-0.929113, 0.169},
    {-0.940522, 0.171},
    {-0.947617, 0.173},
    {-0.959313, 0.175},
    {-0.970818, 0.177},
    {-0.982227, 0.179},
    {-0.993732, 0.181},
    {-1.00543, 0.184},
    {-1.01684, 0.185},
    {-1.02834, 0.188},
    {-1.03975, 0.19},
    {-1.04282, 0.192},
    {-1.06238, 0.193},
    {-1.07331, 0.194},
    {-1.08452, 0.195},
    {-1.09545, 0.198},
    {-1.13956, 0.212},
    {-1.13083, 0.208},
    {-1.14205, 0.209},
    {-1.17263, 0.205},
    {-1.18347, 0.203},
    {-1.19468, 0.201},
    {-1.21673, 0.198},
    {-1.22766, 0.197},
    {-1.23859, 0.196},
    {-1.26064, 0.194},
    {-1.27186, 0.193},
    {-1.28279, 0.191},
    {-1.29372, 0.191},
    {-1.30484, 0.19},
    {-1.31577, 0.189},
    {-1.32699, 0.188},
    {-1.33782, 0.187},
    {-1.34875, 0.186},
    {-1.35997, 0.185},
    {-1.3709, 0.185},
    {-1.38202, 0.184},
    {-1.39295, 0.183},
    {-1.40417, 0.182},
    {-1.41529, 0.182},
    {-1.42651, 0.181},
    {-1.43763, 0.181},
    {-1.44913, 0.18},
    {-1.46035, 0.179},
    {-1.47147, 0.179},
    {-1.48298, 0.179},
    {-1.4941, 0.178},
    {-1.50531, 0.177},
    {-1.51672, 0.177},
    {-1.52794, 0.177},
    {-1.53916, 0.176},
    {-1.55057, 0.176},
    {-1.56178, 0.175},
    {-1.59553, 0.175},
    {-1.60675, 0.175},
    {-1.62938, 0.174},
    {-1.64059, 0.174},
    {-1.65171, 0.174},
    {-1.66322, 0.174},
    {-1.68556, 0.174},
    {-1.70818, 0.174},
    {-1.7194, 0.174},
    {-1.73081, 0.173},
    {-1.74203, 0.173},
    {-1.75315, 0.174},
    {-1.76465, 0.174},
    {-1.77558, 0.174},
    {-1.78642, 0.174}
  };
};
/// @endcond

/////////////////////////////////////////////////////////////////////////////

int main(int argc, char** argv)
{
  /* 
   * Log the result into a tab delimitted file, later we can open 
   * it with Matlab. Use: plot_data4.m to plot the results.
   */
  ofstream log_file;
  std::log_file.open("log_file4.txt");

  
  int n_states = 2;
  int n_outputs = 2;
  mat Q(2, 2);
  mat R(2, 2);
  
  Q << 0.001 << 0    << endr
    << 0     << 0    << endr;
    
  R << 0.1   << 0    << endr
    <<   0   << 0.01 << endr;
  
  colvec x0(2);
  x0 << 0 << 0;

   
  MyEKF myekf;
  myekf.InitSystem(n_states, n_outputs, Q, R);
  myekf.InitSystemState(x0);
  
  for (int k = 0; k < 100; k ++) {
    u(0) = k;
    myekf.EKalmanf(u);
    
    colvec *x_m = myekf.GetCurrentEstimatedState();
    
    log_file << k 
              << x_m->at(0,0)
              << x_m->at(1,0)
              << '\n'; 
  }
  
  log_file.close();
  
  return 0;
}
